{"version":3,"file":"changeFeedIteratorBuilder.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/changeFeedIteratorBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { ClientContext } from \"../../ClientContext\";\nimport { PartitionKey } from \"../../documents\";\nimport { QueryRange, PartitionKeyRangeCache } from \"../../routing\";\nimport { ChangeFeedIteratorOptions } from \"./ChangeFeedIteratorOptions\";\nimport { ChangeFeedStartFrom } from \"./ChangeFeedStartFrom\";\nimport { ChangeFeedStartFromBeginning } from \"./ChangeFeedStartFromBeginning\";\nimport { ChangeFeedStartFromContinuation } from \"./ChangeFeedStartFromContinuation\";\nimport { ChangeFeedStartFromNow } from \"./ChangeFeedStartFromNow\";\nimport { ChangeFeedStartFromTime } from \"./ChangeFeedStartFromTime\";\nimport { ChangeFeedResourceType } from \"./ChangeFeedEnums\";\nimport { ChangeFeedForPartitionKey } from \"./ChangeFeedForPartitionKey\";\nimport { ErrorResponse } from \"../../request\";\nimport { ChangeFeedForEpkRange } from \"./ChangeFeedForEpkRange\";\nimport { getIdFromLink, getPathFromLink, ResourceType, Constants } from \"../../common\";\nimport { buildInternalChangeFeedOptions, fetchStartTime, isEpkRange } from \"./changeFeedUtils\";\nimport { isPartitionKey } from \"../../utils/typeChecks\";\nimport { Container } from \"../Container\";\nimport { FeedRangeInternal } from \"./FeedRange\";\n\nexport function changeFeedIteratorBuilder(\n  cfOptions: ChangeFeedIteratorOptions,\n  clientContext: ClientContext,\n  container: Container,\n  partitionKeyRangeCache: PartitionKeyRangeCache,\n): any {\n  const url = container.url;\n  const path = getPathFromLink(url, ResourceType.item);\n  const id = getIdFromLink(url);\n\n  let changeFeedStartFrom = cfOptions.changeFeedStartFrom;\n\n  if (changeFeedStartFrom === undefined) {\n    changeFeedStartFrom = ChangeFeedStartFrom.Now();\n  }\n\n  if (changeFeedStartFrom instanceof ChangeFeedStartFromContinuation) {\n    const continuationToken = changeFeedStartFrom.getCfResourceJson();\n    const resourceType = changeFeedStartFrom.getResourceType();\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      changeFeedStartFrom.getCfResource(),\n    );\n\n    if (\n      resourceType === ChangeFeedResourceType.PartitionKey &&\n      isPartitionKey(continuationToken.partitionKey)\n    ) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        continuationToken.partitionKey,\n        internalCfOptions,\n      );\n    } else if (resourceType === ChangeFeedResourceType.FeedRange) {\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        undefined,\n      );\n    } else {\n      throw new ErrorResponse(\"Invalid continuation token.\");\n    }\n  } else if (\n    changeFeedStartFrom instanceof ChangeFeedStartFromNow ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromTime ||\n    changeFeedStartFrom instanceof ChangeFeedStartFromBeginning\n  ) {\n    const startFromNow = changeFeedStartFrom instanceof ChangeFeedStartFromNow ? true : false;\n    const startTime = startFromNow ? undefined : fetchStartTime(changeFeedStartFrom);\n\n    const internalCfOptions = buildInternalChangeFeedOptions(\n      cfOptions,\n      undefined,\n      startTime,\n      startFromNow,\n    );\n    const cfResource = changeFeedStartFrom.getCfResource();\n    if (isPartitionKey(cfResource)) {\n      return new ChangeFeedForPartitionKey(\n        clientContext,\n        container,\n        id,\n        path,\n        cfResource as PartitionKey,\n        internalCfOptions,\n      );\n    } else {\n      let internalCfResource: QueryRange;\n      if (cfResource === undefined) {\n        internalCfResource = new QueryRange(\n          Constants.EffectivePartitionKeyConstants.MinimumInclusiveEffectivePartitionKey,\n          Constants.EffectivePartitionKeyConstants.MaximumExclusiveEffectivePartitionKey,\n          true,\n          false,\n        );\n      } else if (isEpkRange(cfResource)) {\n        internalCfResource = new QueryRange(\n          (cfResource as FeedRangeInternal).minInclusive,\n          (cfResource as FeedRangeInternal).maxExclusive,\n          true,\n          false,\n        );\n      } else {\n        throw new ErrorResponse(\"Invalid feed range.\");\n      }\n      return new ChangeFeedForEpkRange(\n        clientContext,\n        container,\n        partitionKeyRangeCache,\n        id,\n        path,\n        url,\n        internalCfOptions,\n        internalCfResource,\n      );\n    }\n  } else {\n    throw new ErrorResponse(\"Invalid change feed start location.\");\n  }\n}\n"]}